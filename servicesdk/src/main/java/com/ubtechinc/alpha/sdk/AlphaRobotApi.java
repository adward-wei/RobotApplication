package com.ubtechinc.alpha.sdk;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import com.ubtechinc.alpha.sdk.led.LedRobotApi;import com.ubtechinc.alpha.sdk.listener.RobotInterruptListener;import com.ubtechinc.alpha.sdk.listener.SavePowerChangeListener;import com.ubtechinc.alpha.sdk.motion.MotionRobotApi;import com.ubtechinc.alpha.sdk.speech.SpeechRobotApi;import com.ubtechinc.alpha.sdk.sys.SysApi;import com.ubtechinc.alpha.serverlibutil.aidl.SpeechVoice;import com.ubtechinc.alpha.serverlibutil.interfaces.ActionListResultListener;import com.ubtechinc.alpha.serverlibutil.interfaces.ActionResultListener;import com.ubtechinc.alpha.serverlibutil.interfaces.MotorListResultListener;import com.ubtechinc.alpha.serverlibutil.interfaces.MotorMoveAngleResultListener;import com.ubtechinc.alpha.serverlibutil.interfaces.MotorReadAngleListener;import com.ubtechinc.alpha.serverlibutil.interfaces.SpeechASRListener;import com.ubtechinc.alpha.serverlibutil.interfaces.SpeechTtsListener;import com.ubtechinc.alpha.serverlibutil.interfaces.SpeechWakeUpListener;import com.ubtechinc.alpha.serverlibutil.interfaces.StopActonResultListener;import com.ubtechinc.alpha.serverlibutil.service.BinderFetchServiceUtil;import java.util.HashMap;import java.util.List;public class AlphaRobotApi {    private Context mContext;    private AlphaRobotApi(){}    private static volatile AlphaRobotApi  alphaRobotApiInstance;    public static AlphaRobotApi get(){        if(alphaRobotApiInstance ==null){            synchronized(AlphaRobotApi.class){                if(alphaRobotApiInstance ==null){                    alphaRobotApiInstance =new AlphaRobotApi();                }            }        }        return alphaRobotApiInstance;    }    public synchronized void initializ(Context context) {        this.mContext = context.getApplicationContext();        if (!mContext.getPackageName().equals(SdkConstants.ALPHA_PACKAGE_NAME)) {            mContext.registerReceiver(receiver, receiver.getFilter());        }        BinderFetchServiceUtil.get(context).autorityIdentify();        LedRobotApi.get().initializ(mContext);        MotionRobotApi.get().initializ(mContext);        SpeechRobotApi.get().initializ(mContext);        SysApi.get().initializ(mContext);    }    public synchronized void destroy(){        try { //fix crash : IllegalArgumentException:Receiver not registered            if (mContext != null && !mContext.getPackageName().equals(SdkConstants.ALPHA_PACKAGE_NAME)) {                mContext.unregisterReceiver(receiver);            }        } catch (Exception e) {        }        mContext = null;        LedRobotApi.get().destroy();        MotionRobotApi.get().destroy();        SpeechRobotApi.get().destroy();    }    public int speechSetVoiceName(String strVoiceName){        return SpeechRobotApi.get().speechSetVoiceName(strVoiceName);    }    public int speechSetTtsSpeed(int speed){        return SpeechRobotApi.get().speechSetTtsSpeed(speed);    }    public int speechSetTtsVolume(int volume){        return SpeechRobotApi.get().speechSetTtsVolume(volume);    }    public int switchWakeup(boolean enable){        return SpeechRobotApi.get().switchWakeup(enable);    }    public int speechStartTTS(String text, SpeechTtsListener listener){        return SpeechRobotApi.get().speechStartTTS(text,listener);    }    public int speechStartTTS(String text, int speed, SpeechTtsListener listener){        return SpeechRobotApi.get().speechStartTTS(text,speed,listener);    }    public int speechStartTTS(String text, String strVoiceName, SpeechTtsListener listener){        return SpeechRobotApi.get().speechStartTTS(text,strVoiceName,listener);    }    public int speechStartTTS(String text, int speed,String strVoiceName, SpeechTtsListener listener){        return SpeechRobotApi.get().speechStartTTS(text,speed,strVoiceName,listener);    }    public int speechStopTTS(){        return SpeechRobotApi.get().speechStopTTS();    }    public int startSpeechASR(int appId, SpeechASRListener listener) {        return SpeechRobotApi.get().startSpeechASR(appId,listener);    }    public int stopSpeechAsr() {        return SpeechRobotApi.get().stopSpeechASR();    }    public int registerWakeUpListener(SpeechWakeUpListener listener){        return SpeechRobotApi.get().registerWakeUpListener(listener);    }    public List<SpeechVoice> getSpeechVoices(){        return SpeechRobotApi.get().getSpeechVoices();    }    public SpeechVoice getCurSpeechVoices() {        return SpeechRobotApi.get().getCurSpeechVoices();    }    /**action*/    public int getActionList(ActionListResultListener listener){        return MotionRobotApi.get().getActionList(listener);    }    public int playAction(String actionName, ActionResultListener listener){        return MotionRobotApi.get().playAction(actionName,listener);    }    public int stopAction(StopActonResultListener listener){        return MotionRobotApi.get().stopAction(listener);    }    public int getMotorList(MotorListResultListener listener){        return MotionRobotApi.get().getMotorList(listener);    }    public int moveToAbsoluteAngle(int nMotorId, int nRadian,short duration, MotorMoveAngleResultListener onListener){        return MotionRobotApi.get().moveToAbsoluteAngle(nMotorId,nRadian,duration,onListener);    }    public int moveRefAngle(int nMotorId, int nRadian, short duration,MotorMoveAngleResultListener onListener){        return MotionRobotApi.get().moveRefAngle(nMotorId,nRadian,duration,onListener);    }    public int readAbsoluteAngle(int nMotorId, boolean acdump, MotorReadAngleListener listener){        return MotionRobotApi.get().readAbsoluteAngle(nMotorId, acdump, listener);    }    public void setPowerSaveMode(boolean b){        MotionRobotApi.get().setPowerSaveMode(b);    }    //===================================临时方案，通过广播获取主服务一些信息=============================================    private final RobotReceiver receiver = new RobotReceiver();    public  void registerSavePowerListener(SavePowerChangeListener listener){        receiver.addListener(SdkConstants.ACTION_CHANGE_SAVEPOWER_MODE, listener);    }    public void registerRobotInterruptListener(RobotInterruptListener listener){        receiver.addListener(SdkConstants.ACTION_ALPHA_INTERRUPT_BUSINESS, listener);    }    private class RobotReceiver extends BroadcastReceiver{        private HashMap<String, Object> listeners = new HashMap<>(2);        private final IntentFilter filter = new IntentFilter();        RobotReceiver() {            filter.addAction(SdkConstants.ACTION_ALPHA_INTERRUPT_BUSINESS);            filter.addAction(SdkConstants.ACTION_CHANGE_SAVEPOWER_MODE);        }        IntentFilter getFilter() {            return filter;        }        void addListener(String action, Object listener){            listeners.put(action, listener);            filter.addAction(action);        }        Object getListener(String action) {            return listeners.get(action);        }        @Override        public void onReceive(Context context, Intent intent) {            final String action = intent.getAction();            if (SdkConstants.ACTION_ALPHA_INTERRUPT_BUSINESS.equals(action)){                RobotInterruptListener listener = (RobotInterruptListener) listeners.get(SdkConstants.ACTION_ALPHA_INTERRUPT_BUSINESS);                if (listener != null)                    listener.onInterrupt();            }else if (SdkConstants.ACTION_CHANGE_SAVEPOWER_MODE.equals(action)){                SavePowerChangeListener listener = (SavePowerChangeListener) listeners.get(action);                if (listener != null) {                    boolean enable = intent.getBooleanExtra(SdkConstants.ACTION_CHANGE_SAVEPOWER_MODE, false);                    listener.savePower(enable);                }            }        }    }}
package com.ubtechinc.alpha.serverlibutil.service;import android.content.Context;import android.os.RemoteException;import com.ubtechinc.alpha.sdk.SdkConstants;import com.ubtechinc.alpha.sdk.led.LedBright;import com.ubtechinc.alpha.sdk.led.LedColor;import com.ubtechinc.alpha.serverlibutil.aidl.ILedInterface;import com.ubtechinc.alpha.serverlibutil.aidl.IRemoteLedListResultListener;import com.ubtechinc.alpha.serverlibutil.aidl.IRemoteLedOperationResultListener;import com.ubtechinc.alpha.serverlibutil.aidl.LedInfo;import com.ubtechinc.alpha.serverlibutil.interfaces.LedListResultListener;import com.ubtechinc.alpha.serverlibutil.interfaces.LedOperationResultListener;import java.util.List;/** * @author logic.peng * @modifier: logic.peng * @modifier-time:2017/7/20 */public class LedControlServiceUtil{    private ILedInterface mService;    public LedControlServiceUtil(Context context){        mService =ILedInterface.Stub.asInterface(BinderFetchServiceUtil.get(context).getServiceBinder(SdkConstants.LED_BINDER_NAME));    }    public int getLedList(final LedListResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.getLedList(new IRemoteLedListResultListener.Stub(){                @Override                public void onGetLedList(int nOpId, int nErr, List<LedInfo> oArrLed) throws RemoteException {                    if (listener != null){                        listener.onGetLedList(nOpId, nErr, oArrLed);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public int turnOnEye(LedColor color, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnEye(color.value, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId, int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId,error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffEye(final LedOperationResultListener listener){        try {            mService.turnOffEye(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId,error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnEyeBlink(final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnEyeBlink(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId, error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffEyeBlink(final LedOperationResultListener listener){        try {            mService.turnOffEyeBlink(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId, error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnEyeFlash(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnEyeFlash(color.value, bright.value, 500, Integer.MAX_VALUE, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId,error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffEyeFlash(final LedOperationResultListener listener){        try {            mService.turnOffEyeFlash(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId,error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnEyeMarquee(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnEyeMarquee(color.value, bright.value, 200, Integer.MAX_VALUE, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId,error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffEyeMarquee(final LedOperationResultListener listener){        try {            mService.turnOffEyeMarquee(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId,error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnHead(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            mService.turnOnHead(color.value, bright.value, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId,error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffHead(final LedOperationResultListener listener){        try {            mService.turnOffHead(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId, error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnHeadFlash(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnHeadFlash(color.value, bright.value, 500, Integer.MAX_VALUE, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId, error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffHeadFlash(final LedOperationResultListener listener){        try {            mService.turnOffHeadFlash(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId, error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnHeadMarquee(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnHeadMarquee(color.value, bright.value, 200, Integer.MAX_VALUE, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId, error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffHeadMarquee(final LedOperationResultListener listener){        try {            mService.turnOffHeadMarquee(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId, error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnHeadBreath(LedColor color, LedBright bright, final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            ret = mService.turnOnHeadMarquee(color.value, bright.value, 1000, Integer.MAX_VALUE, new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null){                        listener.onLedOpResult(nOpId, error);                    }                }            });        } catch (RemoteException e) {            e.printStackTrace();        }        return ret;    }    public void turnOffHeadBreath(final LedOperationResultListener listener){        try {            mService.turnOffHeadMarquee(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId, error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }    public int turnOnChestLed(final LedOperationResultListener listener){        int ret = SdkConstants.ErrorCode.RESULT_FAIL;        try {            mService.turnOnChestLed(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId, error);                }            });        }catch (RemoteException e){            e.printStackTrace();        }        return ret;    }    public void turnOffChestLed(final LedOperationResultListener listener){        try {            mService.turnOffChestLed(new IRemoteLedOperationResultListener.Stub(){                @Override                public void onLedOpResult(int nOpId,int error) throws RemoteException {                    if (listener != null)                        listener.onLedOpResult(nOpId,error);                }            });        }catch (RemoteException e) {            e.printStackTrace();        }    }}
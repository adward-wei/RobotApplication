package com.ubtechinc.zh_chat.business;import android.content.Context;import android.os.Handler;import android.os.Looper;import android.os.Message;import com.ubtech.iflytekmix.R;import com.ubtechinc.zh_chat.nets.business.AddRecord;import com.ubtechinc.zh_chat.play.PlayThread;import com.ubtechinc.zh_chat.robot.UBTSemanticRootProxy;import java.lang.ref.WeakReference;import timber.log.Timber;/** * <pre> *   author: Logic *   email : 2091843903@qq.com *   time  : 2017/3/24 *   desc  : 播放业务 * </pre> */public abstract class PlayBusiness extends BaseBusiness  {    private String name;    private PlayThread musicThread;    private Handler handler;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public PlayBusiness(Context cxt) {        super(cxt);    }    protected abstract Type getType();    @Override    public void start(final UBTSemanticRootProxy handle) {        handle.start_TTS(mContext.getString(R.string.robot_ok_tip), false);        AddRecord.instance().requestAddRecord(getType().getValue(), getName(), getUrl(), mContext.getString(R.string.robot_ok_tip),                getSpeechResult());        musicThread = new PlayThread(mContext, new PlayThread.MusicCallBack() {            @Override            public void musicCallBack(int i) {                switch (i) {                    case 0://准备                        handler.removeMessages(1);                        handle.stop_TTS();                        handle.stop_Grammar();                        try {                            Thread.sleep(500);//                            handle.switchWakeup(false);                        } catch (InterruptedException e) {                            Timber.w(e.getMessage());                        }                        break;                    case 1://完成                        stopProcess();                        handle.start_TTS(mContext.getString(R.string.play_end),false);//                        AddRecord.instance().requestAddRecord(getType().getValue(), getName(), getUrl(), mContext.getString(R.string.play_end),//                                getSpeechResult());                        break;                    case -1:// 异常                        handler.removeMessages(1);                        handle.start_TTS(mContext.getString(R.string.play_fail),false);//                        AddRecord.instance().requestAddRecord(getType().getValue(), getName(), getUrl(), mContext.getString(R.string.play_fail),//                                getSpeechResult());                        break;                    default:                        break;                }            }        }, getUrl());        musicThread.start();        handler = new MyHandler(mContext, handle, this);        handler.sendEmptyMessageDelayed(1, 1000);    }    static class  MyHandler extends Handler{        Context cxt;        WeakReference<UBTSemanticRootProxy> weakHandle;        WeakReference<PlayBusiness> weakBusiness;        int time = 0;        MyHandler(Context context, UBTSemanticRootProxy handle , PlayBusiness business){            super(Looper.getMainLooper());            this.cxt = context;            this.weakBusiness = new WeakReference<PlayBusiness>(business);            this.weakHandle = new WeakReference<UBTSemanticRootProxy>(handle);        }        @Override        public void handleMessage(Message msg) {            if (msg.what == 1){                time++;                sendEmptyMessageDelayed(1, 1000);                UBTSemanticRootProxy handle = weakHandle.get();                PlayBusiness business = weakBusiness.get();                if (time == 8 && handle != null && business != null) {                    handle.start_TTS(cxt.getString(R.string.network_timeout), false);                    time = 0;                    removeMessages(1);                    business.stopProcess();                }            }        }    }    @Override    public void clean(UBTSemanticRootProxy handle) {        stopProcess();    }    private void stopProcess() {        if (musicThread != null) {            musicThread.stopMusic();            musicThread = null;        }    }}
/* * *  * *  * Copyright (c) 2008-2016 UBT Corporation.  All rights reserved.  Redistribution, *  *  modification, and use in source and binary forms are not permitted unless otherwise authorized by UBT. *  * * */package com.ubtechinc.alpha.utils;import android.content.Context;import android.content.pm.ApplicationInfo;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.text.TextUtils;import com.ubtech.utilcode.utils.LogUtils;import com.ubtechinc.alpha.appmanager.AppConstants;import com.ubtechinc.alpha.appmanager.AppInfo;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;public class PackageUtils {    private static final String TAG = "PackageUtils";    //第三方Manifest文件填写的实际值是AppKey，命名错了    public static final String ALPHA_KEY = "alpha2_appid";    public static List<PackageInfo> getInstalledApps(Context context) {        PackageManager pManager = context.getPackageManager();        List<PackageInfo> apps = pManager.getInstalledPackages(0);        return apps;    }    // <pkgName,AppInfo>    public static Map<String,AppInfo> getInstalledAppInfo(Context context) {        Map<String,AppInfo> appMap = new HashMap<String,AppInfo>();        PackageManager pManager = context.getPackageManager();        List<ApplicationInfo> applicationList = pManager.getInstalledApplications(PackageManager.GET_META_DATA);        if (applicationList != null && applicationList.size() > 0) {            for (ApplicationInfo info : applicationList) {                AppInfo appInfo = new AppInfo();                Bundle bundle = info.metaData;                if (bundle != null) {                    String appKey = bundle.getString(ALPHA_KEY);                    if (TextUtils.isEmpty(appKey)) {                        continue;                    }                    String name = pManager.getApplicationLabel(info).toString();                    appInfo.setAppName(name);                    appInfo.setPackageName(info.packageName);                    appInfo.setAppKey(appKey);                    appMap.put(info.packageName, appInfo);                }            }        }        return appMap;    }    public static AppInfo getAppInfoByPkgName(Context context,String pkgName) {        PackageManager pManager = context.getPackageManager();        ApplicationInfo application = null;        try {            application = pManager.getApplicationInfo(pkgName,PackageManager.GET_META_DATA);        } catch (NameNotFoundException e) {            e.printStackTrace();        }        AppInfo appInfo = new AppInfo();        Bundle bundle = application.metaData;        if (bundle == null){            LogUtils.w("unknown application!");            return null;        }        String appKey = bundle.getString(ALPHA_KEY);        appInfo.setAppName(application.name);        appInfo.setPackageName(application.packageName);        appInfo.setAppKey(appKey);        if (TextUtils.isEmpty(appKey)) { //过滤掉非VAPP            return null;        } else {            return appInfo;        }    }    public static int getAppId(Context context, String pckName) {        int appId = -1;        ApplicationInfo appInfo = null;        try {            if (context == null) return appId;            appInfo = context.getPackageManager().getApplicationInfo(pckName, PackageManager.GET_META_DATA);        } catch (NameNotFoundException e) {            e.printStackTrace();        }        if (appInfo == null) return appId;        Bundle meta = appInfo.metaData;        if (meta == null) return appId;        appId = meta.getInt(AppConstants.ALPHA_APPID);        return appId;    }    public static String getMetaStrValue(Context context, String pckName, String key) {        String value = null;        ApplicationInfo appInfo = null;        try {            appInfo = context.getPackageManager().getApplicationInfo(pckName, PackageManager.GET_META_DATA);            Bundle bundle = appInfo.metaData;            if (bundle != null) {                value = bundle.getString(key);            }        } catch (Exception e) {            e.printStackTrace();        }        return value;    }    public static int getMetaIntValue(Context context, String pckName, String key) {        int appId = -1;        ApplicationInfo appInfo = null;        try {            appInfo = context.getPackageManager().getApplicationInfo(pckName, PackageManager.GET_META_DATA);            Bundle bundle = appInfo.metaData;            if (bundle != null) {                appId = bundle.getInt(key);            }        } catch (Exception e) {            e.printStackTrace();        }        return appId;    }    public static int getMetaIntValue(Context context,String key) {        int appId = -1;        ApplicationInfo appInfo = null;        try {            appInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);            Bundle bundle = appInfo.metaData;            if (bundle != null) {                appId = bundle.getInt(key);            }        } catch (Exception e) {            e.printStackTrace();        }        return appId;    }    public static String getAppInfo(Context context) {        try {            String pkName = context.getPackageName();            String versionName = context.getPackageManager().getPackageInfo(pkName, 0).versionName;            int versionCode = context.getPackageManager().getPackageInfo(pkName, 0).versionCode;            return pkName + " " + versionName + " " + versionCode;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static String getBuildTime(Context context) {        try {            ApplicationInfo ai = context.getApplicationInfo();            ZipFile zf = new ZipFile(ai.sourceDir);            ZipEntry ze = zf.getEntry("classes.dex");            long time = ze.getTime();            zf.close();            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");            Date dt = new Date(time);            return sdf.format(dt);        } catch (Exception e) {            e.printStackTrace();        }        return "";    }}
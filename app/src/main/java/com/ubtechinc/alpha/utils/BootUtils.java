/* * *  * *  *  * *  *  * Copyright (c) 2008-2017 UBT Corporation.  All rights reserved.  Redistribution, *  *  *  modification, and use in source and binary forms are not permitted unless otherwise authorized by UBT. *  *  * *  * * */package com.ubtechinc.alpha.utils;import android.os.Environment;import com.ubtech.utilcode.utils.ShellUtils;import com.ubtechinc.alpha.ops.action.Action;import com.ubtechinc.alpha.provider.ActionInfoVisitor;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.InputStreamReader;import timber.log.Timber;/** * @desc : 初始化 * @author: Logic * @email : logic.peng@ubtech.com * @time : 2017/4/20 * @modifier: * @modify_time: */public class BootUtils {    private static BootUtils instance = new BootUtils();    private static final String PRE_DEFINE_FILE = "actionInfo.txt";    private BootUtils() {    }    public static BootUtils get() {        return instance;    }    public void preGetActionInfo() {        String path = Constants.ACTION_PATH + File.separator + PRE_DEFINE_FILE;        File file = new File(path);        if (!file.exists())            return;        String[] data;        ActionInfoVisitor provider = ActionInfoVisitor.get();        try {            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "gbk"));            String line = br.readLine();            while (line != null) {                data = line.split("##");                if (data.length == 4) {                    String filepath = Constants.ACTION_PATH + File.separator + data[0] + ".ubx";                    File actionFile = new File(filepath);                    boolean isFileExist = actionFile.exists();                    if (isFileExist) {                        Action action = new Action();                        action.Id = data[0];                        action.cn_name = data[1];                        action.en_name = data[2];                        action.type = data[3];                        action.time = Integer.valueOf(data[3]);                        provider.saveOrUpdate(action);                    } else {                        provider.deleteById(data[0]);                    }                }                line = br.readLine();            }            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void copyActionsFromSystem() {        Timber.d("ACTION_PATH=" + Constants.ACTION_PATH);        File destDir = new File(Constants.ACTION_PATH);        if (!destDir.exists()) {            if (!destDir.mkdirs()) return;            Timber.d("copyActionsFromSystem...");            ShellUtils.CommandResult result = ShellUtils.execCmd("cp -rf /system/priv-app/actions/* /mnt/sdcard/actions/", false);            Timber.d("shell end " + result.result);            if (result.result == 0) {                Timber.d("!!! Factory reset copy action file success");            } else {                Timber.d("!!! Factory reset copy action file fail");            }        }    }}
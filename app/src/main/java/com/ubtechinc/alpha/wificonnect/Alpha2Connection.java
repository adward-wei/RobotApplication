package com.ubtechinc.alpha.wificonnect;import android.app.AlarmManager;import android.bluetooth.BluetoothAdapter;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.net.NetworkInfo;import android.net.wifi.ScanResult;import android.net.wifi.WifiManager;import android.os.Build;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.os.Parcelable;import android.provider.Settings;import android.text.TextUtils;import com.ubtech.utilcode.utils.LogUtils;import com.ubtech.utilcode.utils.WifiControl;import com.ubtech.utilcode.utils.notification.NotificationCenter;import com.ubtech.utilcode.utils.thread.ThreadPool;import com.ubtechinc.alpha.event.SetWifiStatusEvent;import com.ubtechinc.alpha.ops.RobotOpsManager;import com.ubtechinc.alpha.ops.led.SetEyeMarqueeOp;import com.ubtechinc.alpha.ops.led.SetHeadMarqueeOp;import com.ubtechinc.alpha.ops.led.StopEyeMarqueeOp;import com.ubtechinc.alpha.ops.led.StopHeadMarqueeOp;import com.ubtechinc.alpha.ops.led.mic5.LedManagerService;import com.ubtechinc.alpha.ops.led.mic5.LedPriority;import com.ubtechinc.alpha.ops.led.mic5.LedType;import com.ubtechinc.alpha.ops.led.mic5.NetConnectedLed;import com.ubtechinc.alpha.ops.led.mic5.NetDisconnectionLed;import com.ubtechinc.alpha.ops.led.mic5.RobotStatus;import com.ubtechinc.alpha.receiver.WifiConnectionReceiver;import com.ubtechinc.alpha.robotinfo.RobotConfiguration;import com.ubtechinc.alpha.robotinfo.RobotLanguage;import com.ubtechinc.alpha.sdk.led.LedBright;import com.ubtechinc.alpha.sdk.led.LedColor;import com.ubtechinc.alpha.speech.SpeechServiceProxy;import com.ubtechinc.alpha.utils.StringUtil;import com.ubtechinc.alpha2services.R;import com.ubtechinc.nets.socket.udp.MulticastSocketProcess;import org.json.JSONArray;import org.json.JSONException;import java.util.ArrayList;import java.util.List;import java.util.Random;import static android.content.Context.ALARM_SERVICE;/** * Created by liliang(Brian.li) on 2016/8/10. * the class have network connection responsibility. */public class Alpha2Connection {    private static final String TAG = "Alpha2Connection";    // 联网的方式    public static final int QR_TYPE = 0x01;    public static final int BLUETOOTH_TYPE = 0x04;    public static final int DEFAULT_TYPE = 0;    // 内部状态常量定义    private static final int BASE_NUMBER = 1000;    private static final int WIFI_CONNECTION_BEGINNING = BASE_NUMBER - 1;    private static final int NETWORK_PING_RESULT = BASE_NUMBER + 2;    public static final int WIFI_INFORMATION_ERROR = BASE_NUMBER + 6;    private static final int BLUETOOTH_WIFI_CONNECTION = BASE_NUMBER + 8;    public static final int QR_WIFI_CONNECTION = BASE_NUMBER + 9;    private static final int CONNECTIONING_WIFI = BASE_NUMBER + 10;    public static final int WIFI_CONNECTION_ENDING = BASE_NUMBER + 13;    private static final int START_NETWORK_DETECTION = BASE_NUMBER + 20;    private static final int WAITTING_SCAN_HINT = BASE_NUMBER + 21;    private static final int EXIT_CONNECTION_MODE = BASE_NUMBER + 22;    private static final String BLUETOOTH_NAME_PREFIX = "Alpha2_";    public static final String LOLLIPOP_RELEASE_NAME = "5.1.1";    // wifi连接状态常量    public static final int WIFI_DISCONNECTED = 0;    public static final int WIFI_CONNECTED = 1;    public static final int WIFI_CONNECTING = 2;    private static Alpha2Connection mAlpha2Connection;    private Context mContext;    private BluetoothAdapter mBluetoothAdapter = null;    private WifiManager wifiManager;    // 连接的类型，蓝牙、二维码...    private int type_connection = DEFAULT_TYPE;    private String ssid_name = "";    private String readyConnect_ssid = "";    // 是否正在联网    private boolean isConnectingNow = false;    // wifi账号验证允许失败的次数    private int wifiAccountFailer = 1;    // wifi信号列表    private volatile String wifiString = "[]";    Alpha2WifiConnect wifiConnectBegin;    //有关wifi的系统广播接收器    private WifiConnectionReceiver mBroadCastReceiver;    // wifi的状态，指客观的状态    private AlphaWifiState alphaWifiState = AlphaWifiState.IDLE;    // 对wifi进行连接操作的状态，用于状态跳转    private int status = WIFI_CONNECTION_BEGINNING;    public SharedPreferences sharedPreferences = null;    private Alpha2Connection(Context context) {        mContext = context.getApplicationContext();        sharedPreferences = mContext.getSharedPreferences("ALPHA_MAIN_SHARED",                Context.MODE_PRIVATE);        IntentFilter myIntentFilter = new IntentFilter();        myIntentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);        myIntentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);        myIntentFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);        myIntentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);        mBroadCastReceiver = new WifiConnectionReceiver();        mContext.registerReceiver(mBroadCastReceiver, myIntentFilter);        wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);        wifiConnectBegin = new Alpha2WifiConnect(wifiManager);    }    public void unRegisterBoradcast() {        if (mBroadCastReceiver != null) {            mContext.unregisterReceiver(mBroadCastReceiver);        }    }    public static Alpha2Connection getInstance(Context context) {        if (mAlpha2Connection == null) {            synchronized (Alpha2Connection.class) {                if (mAlpha2Connection == null)                    mAlpha2Connection = new Alpha2Connection(context);            }        }        return mAlpha2Connection;    }    // 开启蓝牙    public void beginNetworkConnection() {        type_connection = DEFAULT_TYPE;        playTTS(StringUtil.getString(R.string.begin_connection_0));        if (getAndroidSystemVersion().contains(LOLLIPOP_RELEASE_NAME)) {            beginBtEnable();        }        wifiString = WifiListObtain.get(mContext).getWifiList();        setConnectingNow(true);//        beginLedEffect();        wifiConnectBegin.disableNetworkConfig();    }    // 停止蓝牙    public void stopNetworkConnection(boolean flag) {        if (flag) {            playTTS(StringUtil.getString(R.string.exit_connection));        }        stopBtDisable();        ConnectionTimer.get().stopConnectionTimer();        ConnectionTimer.get().stopConnectionHintTimer();        setConnectingNow(false);//        exitLedEffect();    }    // 打开蓝牙    private void beginBtEnable() {        stopBleService();        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        if (mBluetoothAdapter == null) {        } else {            if (!mBluetoothAdapter.isEnabled()) {                mBluetoothAdapter.enable();            }        }        mHandler.sendEmptyMessageDelayed(WAITTING_SCAN_HINT, 2500);    }    // 关闭蓝牙    private void stopBtDisable() {        status = WIFI_CONNECTION_BEGINNING;        stopBleService();        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        if (mBluetoothAdapter == null) {            return;        }        if (mBluetoothAdapter.isEnabled()) {            mBluetoothAdapter.disable();        }    }    // 开机后自动联网    public void beginWifiConnection() {        // open the wifi interface        status = WIFI_CONNECTION_BEGINNING;        WifiControl wifiControl = WifiControl.get(mContext);        if (!wifiControl.isEnable()) {            autoConnectWifi(wifiControl);        }    }    public void setBluetoothName(String serialNumber) {        if (mBluetoothAdapter != null) {            mBluetoothAdapter.setName(BLUETOOTH_NAME_PREFIX + serialNumber);        }    }    // 启动蓝牙服务    public void startBleService() {        if (getAndroidSystemVersion().contains(LOLLIPOP_RELEASE_NAME)) {            BleCommunicate.get().startBleService(mContext);        }    }    // 停止蓝牙服务    private void stopBleService() {        BleCommunicate.get().stopBleService();    }    private Handler mHandler = new Handler(Looper.getMainLooper()) {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case WAITTING_SCAN_HINT:                    ConnectionTimer.get().startConnectionHintTimer();                    break;                case NETWORK_PING_RESULT:                    boolean isWifiOK = (boolean) msg.obj;                    Random random = new Random();                    int select = 0;                    String text = null;                    try {                        if (!isWifiOK) {                            // 网络连接失败                            select = random.nextInt(2);                            if (!RobotConfiguration.get().isBusiness) {//商演版本不需要网络播报                                if (status != QR_WIFI_CONNECTION)                                    text = StringUtil.getString(R.string.wifi_connection_fail_0 + select);                            }                        } else {                            // 网络连接成功                            select = random.nextInt(4);                            //text = StringUtil.getString(R.string.answer_connect_success_0+select);                            if (!RobotConfiguration.get().isBusiness) {//商演版本不需要网络播报                                text = StringUtil.getString(R.string.wifi_connection_success_0 + select);                            }                            autoUpdateTimeAndTimeZoo();                        }                        if (!TextUtils.isEmpty(text)) {                            playTTS(text);                        }                        if (isConnectingNow()) {                            if (type_connection == BLUETOOTH_TYPE) {                                BleCommunicate.get().sendRobotConnectionStatus();                                mHandler.sendEmptyMessageDelayed(EXIT_CONNECTION_MODE, 2000);                            } else if (type_connection == QR_TYPE) {                                stopNetworkConnection(false);                            }                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                    break;                case WIFI_INFORMATION_ERROR:                    status = WIFI_CONNECTION_ENDING;                    String text1 = StringUtil.getString(R.string.wifi_information_error);                    if (text1 != null) {                        playTTS(text1);                    }                    break;                case START_NETWORK_DETECTION:                    if (alphaWifiState != AlphaWifiState.DISCONNECTED) {                        startPing();                    } else {                    }                    break;                case EXIT_CONNECTION_MODE:                    try {                        BleCommunicate.get().exitConnectionMode();                    } catch (JSONException e) {                        e.printStackTrace();                    }                    break;                default:                    break;            }        }    };    // wifi连接的状态    public void wifiConnectState(Intent intent) {        Parcelable parcelableExtra = intent                .getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);        if (null != parcelableExtra) {            NetworkInfo networkInfo = (NetworkInfo) parcelableExtra;            NetworkInfo.State state = networkInfo.getState();            boolean isConnected = state == NetworkInfo.State.CONNECTED;// 当然，这边可以更精确的确定状态            if (isConnected) {                // 连接成功                if (alphaWifiState != AlphaWifiState.CONNECTED) {                    wifiConnectSuccess();                    //wifi连接成功                    LedManagerService.getLedManager().operationLedRightNow(new NetConnectedLed(LedPriority.PRIORITY_NORMAL, LedType.NETWORK_CONNECTED));                    LedManagerService.getLedManager().notifyRobotStatus(RobotStatus.NETWORK_CONNECTED);                    LogUtils.e(TAG, "-----播报网络连接上----");                }                alphaWifiState = AlphaWifiState.CONNECTED;            } else {                if (alphaWifiState == AlphaWifiState.IDLE                        || alphaWifiState == AlphaWifiState.CONNECTED) {                    // 没有连接                    if (type_connection == DEFAULT_TYPE && !isConnectingNow()) {                        ArrayList<String> textList = HintStringObtain.getRandomHint("no_network");                        String text = textList.get(0);                        playTTS(text);                    }                    LogUtils.e(TAG, "-----播报网络断开----");                    LedManagerService.getLedManager().operationLedRightNow(new NetDisconnectionLed(LedPriority.PRIORITY_MAX, LedType.NETWORK_DISCONNECTION));                    LedManagerService.getLedManager().notifyRobotStatus(RobotStatus.NETWORK_DISCONNECTION);                    alphaWifiState = AlphaWifiState.DISCONNECTED;                    sendStatus2SerialBoard((byte) WIFI_DISCONNECTED);                }            }        }    }    public AlphaWifiState getWifiState(){        return alphaWifiState;    }    public void wifiConnectSuccess() {        LogUtils.d(TAG, " wifiConnectSuccess");        synchronized (this) {            String strBroadcastIpAddr = WifiControl.get(mContext).getNetbroadcastAddr();            MulticastSocketProcess.get(null, null, 0).setmGroupIpAddress(strBroadcastIpAddr);            MulticastSocketProcess.get(null, null, 0).broadCastDevice();            Message msg = new Message();            msg.what = START_NETWORK_DETECTION;            mHandler.sendMessageDelayed(msg, 1000);            sendStatus2SerialBoard((byte) WIFI_CONNECTED);        }    }    // 网络连接的状态，来自系统的反馈    public void networkStateChanged(NetworkInfo.DetailedState state) {        String ssid = wifiManager.getConnectionInfo().getSSID();        switch (state) {            case CONNECTING:                if (ssid != null)                sendStatus2SerialBoard((byte) WIFI_CONNECTING);                break;            case AUTHENTICATING:                if (status == BLUETOOTH_WIFI_CONNECTION || status == QR_WIFI_CONNECTION)                    if (!ssid.equals("0x") && !ssid.equals("<unknown ssid>") && ssid.equals(getSSIDName())) {                        status = CONNECTIONING_WIFI;                    }                break;            case OBTAINING_IPADDR:                ssid_name = ssid;                break;            case CONNECTED:                ssid_name = ssid;                status = WIFI_CONNECTION_ENDING;                break;            case DISCONNECTED:                break;            case FAILED:                LogUtils.d(TAG, "Connection failed");                break;        }    }    /**     * 打开wifi开关后自动连接wifi     */    private void autoConnectWifi(WifiControl controls) {        LogUtils.i(TAG, "autoConnectWifi modify name by brian.li");        List<ScanResult> wifiResultList;        List<ScanResult> confingList = new ArrayList<ScanResult>();        controls.openNetCard();        controls.wifiStartScan();        // add by zdy 循环查找wifi状态        // 0正在关闭,1WIFi不可用,2正在打开,3可用,4状态不可zhi        while (controls.wifiCheckState() != WifiManager.WIFI_STATE_ENABLED) {// 等待Wifi开启            LogUtils.i(TAG, "wifiControl");            for (int i = 0; i < 15; i++) {                try {                    Thread.sleep(200);                } catch (Exception e) {                    // TODO Auto-generated catch block                    e.printStackTrace();                }            }        }        confingList.clear();        wifiResultList = controls.getScanResults();        for (int i = 0; i < wifiResultList.size(); i++) {            ScanResult strScan = wifiResultList.get(i);            if (controls.IsExsits("" + strScan.SSID) != null) {// 已经连接过                confingList.add(strScan);            }        }        String maxLevelSsid = WifiListObtain.get(mContext).getConfigListMaxLevel(confingList);        if (maxLevelSsid != null) {            controls.connectKnowAp(maxLevelSsid);        }    }    // ping外网，验证与外网的联通性    private void startPing() {        ThreadPool.runOnNonUIThread(new Runnable() {            @Override            public void run() {                LogUtils.d(TAG, "startPing");                boolean isWifiOK = WifiControl.hasActiveInternetConnection();                Message msg = new Message();                msg.what = NETWORK_PING_RESULT;                msg.obj = isWifiOK;                mHandler.sendMessage(msg);            }        });    }    private String getNetworkSecureMethod(String ssid) {        try {            JSONArray wifiInfo = new JSONArray(wifiString);            for (int i = 0; i < wifiInfo.length(); i++) {                if (wifiInfo.getJSONObject(i).get(WifiListObtain.SSID).equals(ssid)) {                    return wifiInfo.getJSONObject(i).get(WifiListObtain.CAPABILITIES).toString();                }            }        } catch (JSONException e) {            e.printStackTrace();        }        return null;    }    // 联网的实际操作    public void connectedBegin(final String ssidName, final String password, final String cap, int connection_type) {        LogUtils.d(TAG, "connectedBegin   ssidName  " + ssidName + "  password " + password + "  connection_type  " + connection_type);        type_connection = connection_type;        setReadyConnectSsid(ssidName);        ConnectionTimer.get().startConnectionTimer();        wifiAccountFailer = 1;        if (getNetworkSecureMethod(ssidName) != null) {            ThreadPool.runOnNonUIThread(new Runnable() {                @Override                public void run() {                    wifiConnectBegin.Connect(ssidName, password, getNetworkSecureMethod(ssidName));                }            });        } else {            ThreadPool.runOnNonUIThread(new Runnable() {                @Override                public void run() {                    wifiConnectBegin.Connect(ssidName, password, cap);                }            });        }    }    private void playTTS(String text) {        SpeechServiceProxy.getInstance().speechStartTTS(text,null);    }    /**     * Tell the serial board wifi status, so the header led will be controlled by the serial board     * var=0  disconnect the network     * var=1  connected the network     * var=2  connecting the network     *     * @param var     */    public void sendStatus2SerialBoard(byte var) {        byte[] param = new byte[1];        param[0] = var;        SetWifiStatusEvent event = new SetWifiStatusEvent();        event.param = var;        NotificationCenter.defaultCenter().publish(event);    }    public String getSSIDName() {        String ssid = ssid_name.replace("\"", " ");        return ssid;    }    private void setReadyConnectSsid(String name) {        readyConnect_ssid = name;    }    public String getReadyConnectSsid() {        return readyConnect_ssid;    }    private void autoUpdateTimeAndTimeZoo(){        if (Settings.Global.getInt(mContext.getContentResolver(), Settings.Global.AUTO_TIME, 0) == 0){            Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.AUTO_TIME, 1);        }        if (Settings.Global.getInt(mContext.getContentResolver(), Settings.Global.AUTO_TIME_ZONE, 0) == 0){            Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.AUTO_TIME_ZONE, 1);        }        if (RobotLanguage.CN.equals(RobotConfiguration.get().asr_Language)){            AlarmManager am = (AlarmManager) mContext.getSystemService(ALARM_SERVICE);            am.setTimeZone("GMT+08:00");        }    }    private void beginLedEffect() {		RobotOpsManager.get(mContext).executeOp(new SetHeadMarqueeOp(LedColor.MAGENTA, LedBright.NINE, 0xff, 200, Integer.MAX_VALUE));		RobotOpsManager.get(mContext).executeOp(new SetEyeMarqueeOp(LedColor.MAGENTA, LedBright.NINE, 0xff, 200, Integer.MAX_VALUE));    }    private void exitLedEffect() {		RobotOpsManager.get(mContext).executeOp(new StopEyeMarqueeOp());		RobotOpsManager.get(mContext).executeOp(new StopHeadMarqueeOp());    }    private String getAndroidSystemVersion() {        return Build.VERSION.RELEASE;    }    public Handler getmHandler() {        return mHandler;    }    public int getWifiAccountFailer() {        return wifiAccountFailer;    }    public void setWifiAccountFailer(int wifiAccountFailer) {        this.wifiAccountFailer = wifiAccountFailer;    }    public void setType_connection(int type_connection) {        this.type_connection = type_connection;    }    public boolean isConnectingNow() {        return isConnectingNow;    }    public void setConnectingNow(boolean connectingNow) {        isConnectingNow = connectingNow;    }    public String getWifiString() {        return wifiString;    }}
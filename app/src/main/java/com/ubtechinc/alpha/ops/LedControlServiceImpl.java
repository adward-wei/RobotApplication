package com.ubtechinc.alpha.ops;import android.content.Context;import android.os.RemoteException;import android.support.annotation.NonNull;import com.ubtech.utilcode.utils.thread.ThreadPool;import com.ubtechinc.alpha.ops.led.SetChestLedOp;import com.ubtechinc.alpha.ops.led.SetEyeBlinkOp;import com.ubtechinc.alpha.ops.led.SetEyeFlashOp;import com.ubtechinc.alpha.ops.led.SetEyeLightOp;import com.ubtechinc.alpha.ops.led.SetEyeMarqueeOp;import com.ubtechinc.alpha.ops.led.SetEyeOp;import com.ubtechinc.alpha.ops.led.SetHeadBreathOp;import com.ubtechinc.alpha.ops.led.SetHeadFlashOp;import com.ubtechinc.alpha.ops.led.SetHeadLightOp;import com.ubtechinc.alpha.ops.led.SetHeadMarqueeOp;import com.ubtechinc.alpha.ops.led.StopEyeFlashOp;import com.ubtechinc.alpha.ops.led.StopEyeMarqueeOp;import com.ubtechinc.alpha.ops.led.StopHeadBreathOp;import com.ubtechinc.alpha.ops.led.StopHeadFlashOp;import com.ubtechinc.alpha.ops.led.StopHeadLightOp;import com.ubtechinc.alpha.ops.led.StopHeadMarqueeOp;import com.ubtechinc.alpha.sdk.SdkConstants;import com.ubtechinc.alpha.sdk.led.LedBright;import com.ubtechinc.alpha.sdk.led.LedColor;import com.ubtechinc.alpha.serverlibutil.aidl.ILedInterface;import com.ubtechinc.alpha.serverlibutil.aidl.IRemoteLedListResultListener;import com.ubtechinc.alpha.serverlibutil.aidl.IRemoteLedOperationResultListener;import com.ubtechinc.alpha.utils.IDGenerator;import com.ubtechinc.alpha.utils.LedControlUtils;import com.ubtechinc.alpha.utils.SysUtils;/** * @author logic.peng * @Data 2017/4/24. * @modifier: * @data: 2017/6/1 */public class LedControlServiceImpl extends ILedInterface.Stub {    private static volatile LedControlServiceImpl instance;    private final Context mContext;    private LedControlServiceImpl(Context cxt) {        this.mContext = cxt.getApplicationContext();    }    public static LedControlServiceImpl get(Context cxt) {        if (instance == null) {            synchronized (LedControlServiceImpl.class) {                if (instance == null) {                    instance = new LedControlServiceImpl(cxt);                }            }        }        return instance;    }    @Override    public int getLedList(final IRemoteLedListResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        ThreadPool.runOnNonUIThread(new Runnable() {            @Override            public void run() {                try {                    listener.onGetLedList(id, SdkConstants.ErrorCode.RESULT_SUCCESS, LedControlUtils.getLedInfos());                } catch (RemoteException e) {                    e.printStackTrace();                }            }        });        return id;    }    @Override    public int turnOnEye(int color, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeLightOp(LedColor.valueOf(color)),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffEye(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeOp((byte)0xff,(byte)0xff,                (byte)0, (byte)LedColor.BLACK.value, (short)0,                (short)0,(short)0),                getOpListener(listener, id));    }    @Override    public int turnOnEyeBlink(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeBlinkOp(true),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffEyeBlink(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeBlinkOp(false),                getOpListener(listener, id));    }    @Override    public int turnOnEyeFlash(int color, int bright, int onTime, int TotalTime, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeFlashOp(LedColor.valueOf(color),                LedBright.valueOf(bright), 0xff, onTime, TotalTime),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffEyeFlash(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopEyeFlashOp(),                getOpListener(listener, id));    }    @Override    public int turnOnEyeMarquee(int color, int bright, int onTime, int TotalTime, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetEyeMarqueeOp(LedColor.valueOf(color),                LedBright.valueOf(bright), 0X01, onTime, TotalTime),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffEyeMarquee(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopEyeMarqueeOp(),                getOpListener(listener, id));    }    @Override    public int turnOnHead(int color, int bright, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetHeadLightOp(LedColor.valueOf(color),                LedBright.valueOf(bright)),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffHead(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopHeadLightOp(),                getOpListener(listener, id));    }    @Override    public int turnOnHeadFlash(int color, int bright, int onTime, int totalTime, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetHeadFlashOp(LedColor.valueOf(color),                        LedBright.valueOf(bright), 0X10, onTime, totalTime),                        getOpListener(listener, id));        return id;    }    @Override    public void turnOffHeadFlash(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopHeadFlashOp(),                getOpListener(listener, id));    }    @Override    public int turnOnHeadMarquee(int color, int bright, int onTime, int totalTime, final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()) {            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetHeadMarqueeOp(LedColor.valueOf(color),                LedBright.valueOf(bright), 0X01, onTime, totalTime),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffHeadMarquee(final IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopHeadMarqueeOp(),                getOpListener(listener, id));    }    @Override    public int turnOnHeadBreath(int color, int bright, int onTime, int totalTime, IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED;        }        RobotOpsManager.get(mContext).executeOp(new SetHeadBreathOp(LedColor.valueOf(color),                LedBright.valueOf(bright),0XFF,onTime, totalTime),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffHeadBreath(IRemoteLedOperationResultListener listener) throws RemoteException {        final int id = IDGenerator.get().id();        if (SysUtils.is2Mic()){            handleLedOpError(listener, id, SdkConstants.ErrorCode.DEVICE_NOT_SUPPORTED);            return;        }        RobotOpsManager.get(mContext).executeOp(new StopHeadBreathOp(),                getOpListener(listener, id));    }    @Override    public int turnOnChestLed(final IRemoteLedOperationResultListener listener) throws RemoteException{        final int id = IDGenerator.get().id();        RobotOpsManager.get(mContext).executeOp(new SetChestLedOp(true),                getOpListener(listener, id));        return id;    }    @Override    public void turnOffChestLed(final IRemoteLedOperationResultListener listener) throws RemoteException{        final int id = IDGenerator.get().id();        RobotOpsManager.get(mContext).executeOp(new SetChestLedOp(false),                getOpListener(listener, id));    }    private void handleLedOpError(final IRemoteLedOperationResultListener listener, final int id, final int nErr) {        ThreadPool.runOnNonUIThread(new Runnable() {            @Override            public void run() {                try {                    listener.onLedOpResult(id, nErr);                } catch (RemoteException e) {                    e.printStackTrace();                }            }        });    }    @NonNull    private SerialOpResultListener getOpListener(final IRemoteLedOperationResultListener listener, final int id) {        return new SerialOpResultListener() {            @Override            public void onRecvOpResult(OpResult result) {                try {                    listener.onLedOpResult(id,result.errorCode);                } catch (RemoteException e) {                    e.printStackTrace();                }            }        };    }}
package com.ubtechinc.alpha;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.os.Environment;import android.os.IBinder;import android.os.RemoteException;import android.util.Log;import android.view.View;import com.ubtech.utilcode.utils.CloseUtils;import com.ubtech.utilcode.utils.FileUtils;import com.ubtech.utilcode.utils.JsonUtils;import com.ubtech.utilcode.utils.LogUtils;import com.ubtechinc.alpha.behavior.Behavior;import com.ubtechinc.alpha.behavior.BehaviorInflater;import com.ubtechinc.alpha.download.FileDownload;import com.ubtechinc.alpha.network.business.AddPhoto;import com.ubtechinc.alpha.network.business.FindJoke;import com.ubtechinc.alpha.network.module.AddPhotoModule;import com.ubtechinc.alpha.network.module.FindJokeModule;import com.ubtechinc.alpha.ops.ISerialCmdOp;import com.ubtechinc.alpha.ops.OpResult;import com.ubtechinc.alpha.ops.RobotOpsManager;import com.ubtechinc.alpha.ops.SerialOpResultListener;import com.ubtechinc.alpha.ops.action.Action;import com.ubtechinc.alpha.ops.action.ActionPlayListener;import com.ubtechinc.alpha.ops.led.SetEyeBlinkOp2;import com.ubtechinc.alpha.ops.led.SetEyeFlashOp;import com.ubtechinc.alpha.ops.led.SetEyeMarqueeOp;import com.ubtechinc.alpha.ops.led.SetHeadBreathOp;import com.ubtechinc.alpha.ops.led.SetHeadFlashOp;import com.ubtechinc.alpha.ops.led.SetHeadMarqueeOp;import com.ubtechinc.alpha.ops.motor.MoveAbsAngleOp;import com.ubtechinc.alpha.ops.sys.ReadBatteryVersionOp;import com.ubtechinc.alpha.provider.ActionInfoVisitor;import com.ubtechinc.alpha.sdk.led.LedBright;import com.ubtechinc.alpha.sdk.led.LedColor;import com.ubtechinc.alpha.sdk.led.LedEffect;import com.ubtechinc.alpha.serial.SerialConstants;import com.ubtechinc.alpha.serverlibutil.aidl.ISpeechAsrListener;import com.ubtechinc.alpha.serverlibutil.aidl.ISpeechGrammarInitListener;import com.ubtechinc.alpha.serverlibutil.interfaces.StopActonResultListener;import com.ubtechinc.alpha.speech.SpeechServiceProxy;import com.ubtechinc.alpha.utils.AngleCheckUtils;import com.ubtechinc.alpha.utils.ServiceUtils;import com.ubtechinc.alpha.utils.SoftwareVersionUtils;import com.ubtechinc.alpha.utils.StringUtil;import com.ubtechinc.alpha2services.R;import com.ubtechinc.nets.DownloadInfo;import com.ubtechinc.nets.DownloadManager;import com.ubtechinc.nets.ResponseListener;import com.ubtechinc.nets.http.ThrowableWrapper;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.util.List;import java.util.Random;import timber.log.Timber;public class MainActivity extends Activity {    FileDownload fileDownload;    int index = 0;    String[] urls = new String[]{"http://qunying.jb51.net:81/201312/tools/wifilocating(jb51.net).apk",            "http://c003x.52xumi.com/lol/wxqhbsq_1171.apk",            "http://qunying.jb51.net:81/201312/tools/wifilocating(jb51.net).apk"};    private String URL = urls[index];    private int i = 0;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ServiceUtils.startService(this);    }    public void motorMoveAbsAngle(View view){        byte id = (byte) new Random(System.currentTimeMillis()).nextInt(20);        int lowerLimitAngle = AngleCheckUtils.getLowerLimitAngle(id);        int upperLimitAngle = AngleCheckUtils.getUpperLimitAngle(id);        int angle = lowerLimitAngle + new Random(System.currentTimeMillis()).nextInt(upperLimitAngle - lowerLimitAngle);        RobotOpsManager.get(this).executeOp(new MoveAbsAngleOp(id, angle, (short) 30), new SerialOpResultListener() {            @Override            public void onRecvOpResult(OpResult result) {                Timber.d("nErr = %d", result.errorCode);            }        });    }    public void dance(final View view){        List<Action> actons = new ActionInfoVisitor(this).getAllData();        final Action action = actons.get(new Random(System.currentTimeMillis()).nextInt(actons.size()));        final String[] dances = { "奥运之歌","胜利之歌","当哈姆莱特遇到布鲁克林","阿拉伯半岛的苏丹"                ,"西班牙说唱", "微笑摇摆", "一击滑落", "伦敦大桥垮下来", "我们去约会", "铃儿响叮当"                ,"独立摇滚手", "快乐的大脚", "路边秋千", "尽情娱乐", "拂来星", "电子地带", "做得更好","发现" ,"过来玩吧","童趣"};        final String action_name = dances[new Random(System.currentTimeMillis()).nextInt(dances.length)];        RobotOpsManager.get(this).playAction("大笑", new ActionPlayListener() {            @Override            public void onActionResult(int nErr) {                LogUtils.D("action_name = %s", action_name);                Timber.d("nErrr =%d", nErr);            }        });    }    public void stopDance(View view){        RobotOpsManager.get(this).stopAction(new StopActonResultListener() {            @Override            public void onStopActionResult(int nErr) {                Timber.d("nErrr =%d", nErr);            }        });    }    public void batteryVersion(View view){        RobotOpsManager.get(this).executeOp(new ReadBatteryVersionOp(), new SerialOpResultListener() {            @Override            public void onRecvOpResult(OpResult result) {                Log.d("tag","errorcode: "+result.errorCode);                if (result.errorCode == SerialConstants.ERR_OK)                    LogUtils.D("version =%s",SoftwareVersionUtils.parseBatteryVersion((byte[]) result.data, ((byte[])result.data).length).getVersion());            }        });    }    public void ledOp(View view){    }    public void findJoke(View view){        FindJoke.getInstance().requestFindJoke("CN", "1", new ResponseListener<FindJokeModule.Response>() {            @Override            public void onError(ThrowableWrapper e) {                LogUtils.e(e.getMessage());            }            @Override            public void onSuccess(FindJokeModule.Response response) {                LogUtils.e(JsonUtils.object2Json(response));            }        });        AddPhoto.getInstance().requestAddPhoto("A2222222222","http://video.ubtrobot.com/Alpha2Photo/020201UBT27030900013/IMG_20170508_163741.jpg","16", new ResponseListener<AddPhotoModule.Response>(){            @Override            public void onError(ThrowableWrapper e) {            }            @Override            public void onSuccess(AddPhotoModule.Response response) {                LogUtils.e("logic",JsonUtils.object2Json(response));            }        });    }    public void testDownload2(View view){        refactorDownload(URL,2);    }    public void testDownload3(View view){        refactorDownload(URL,3);    }    public void testDownload(View view){        refactorDownload(URL,1);    }    private void download(String url){        DownloadManager.getInstance().download(url, new DownloadManager.DownloadListener() {            @Override            public void onStart() {            }            @Override            public void onCompleted(DownloadInfo info) {                LogUtils.D("...file = %s", info.getFilePath());            }            @Override            public void onError(Throwable e) {                LogUtils.D("error = %s",e.getMessage());            }            @Override            public void onProcess(int progress) {                LogUtils.D("...progress= %d" ,progress);            }        });    }    private void refactorDownload(String url,int type){        fileDownload = new FileDownload(this,0,null,null,type);        fileDownload.download(url);    }    public void pauseDownload(View view){        index ++;        URL = urls[index%urls.length];        if(fileDownload == null)            return;        fileDownload.pauseRequest(URL);    }    /**     * 字符串读取assets目录下的文件     *     * @param cxt Context     * @param file 文件名     * @param charset 字符集     * @return     */    public static String readAssetsFile2String(Context cxt, String file, String charset){        int len ;        byte[] buf;        String result = "";        InputStream in = null;        try {            in = cxt.getAssets().open(file);            len  = in.available();            buf = new byte[len];            int ret = in.read(buf, 0, len);            if (ret == len)                result = new String(buf, charset);        } catch (Exception e) {            e.printStackTrace();        }finally {            CloseUtils.closeIOQuietly(in);        }        return result;    }    @SuppressWarnings("ResourceType")    public void behaviorParse(View v){        String path = Environment.getExternalStorageDirectory().getPath()+ File.separator + "behavior_configure.xml";        if (!FileUtils.isFileExists(path)){            try {                FileUtils.writeFileFromIS(path, getAssets().open("behavior_configure.xml"), false);            } catch (IOException e) {                e.printStackTrace();            }        }        String path2 = Environment.getExternalStorageDirectory().getPath()+ File.separator + "behavior_configure.xsd";        if (!FileUtils.isFileExists(path2)){            try {                FileUtils.writeFileFromIS(path2, getAssets().open("behavior_configure.xsd"), false);            } catch (IOException e) {                e.printStackTrace();            }        }        Behavior set = BehaviorInflater.loadBehaviorFromXml(path);        if(set == null) {            LogUtils.e("parse error!!!");            return;        }        set.setBehaviorListener(new Behavior.BehaviorListener() {            @Override            public void onCompleted() {                LogUtils.E("LOGIC", "121323213");            }        });        set.start();    }    public void testEyeLedEffect(View v){        LedEffect[] effects = {LedEffect.BLINK, LedEffect.FLASH, LedEffect.MARQUEE};        LedEffect e = effects[new Random(System.currentTimeMillis()).nextInt(3)];        ISerialCmdOp op = null;        switch (e){            case BLINK:                op = new SetEyeBlinkOp2(LedColor.BLUE, LedBright.NINE, 0xff, 1000, 1000, 6000);                break;            case FLASH:                op = new SetEyeFlashOp(LedColor.RED, LedBright.NINE, 0XFF, 1000, 6000);                break;            case MARQUEE:                op = new SetEyeMarqueeOp(LedColor.MAGENTA, LedBright.NINE, 0X1, 1000, 6000);                break;        }        RobotOpsManager.get(this).executeOp(new SetEyeFlashOp(LedColor.GREEN, LedBright.NINE, 0Xff, 1000, 6000));    }    public void testHeadLedEffect(View v){        LedEffect[] effects = {LedEffect.BREATH, LedEffect.FLASH, LedEffect.MARQUEE};        LedEffect e = effects[new Random(System.currentTimeMillis()).nextInt(3)];        ISerialCmdOp op  = null;        switch (e) {            case BREATH:                op = new SetHeadBreathOp(LedColor.GREEN, LedBright.NINE, 0XFF, 1000, 6000);                break;            case FLASH:                op = new SetHeadFlashOp(LedColor.BLACK, LedBright.NINE, 0xFF, 1000, 6000);                break;            case MARQUEE:                op = new SetHeadMarqueeOp(LedColor.YELLOW, LedBright.NINE, 0X1, 1000, 6000);                break;        }        RobotOpsManager.get(this).executeOp(op);    }    public void testSTT(View view) {        try {            SpeechServiceProxy.getInstance().impl().setSpeechMode(0);            SpeechServiceProxy.getInstance().impl().startSpeechAsr(getPackageName(), 1000, new ISpeechAsrListener() {                @Override                public void onBegin() throws RemoteException {                }                @Override                public void onEnd() throws RemoteException {                }                @Override                public void onResult(String text) throws RemoteException {                    LogUtils.d("TEXT = "+ text);                }                @Override                public void onError(int code) throws RemoteException {                }                @Override                public IBinder asBinder() {                    return null;                }            });        } catch (RemoteException e) {            e.printStackTrace();        }    }    public void testRecognizer(View view) {        try {            SpeechServiceProxy.getInstance().impl().setSpeechMode(1);            SpeechServiceProxy.getInstance().impl().initSpeechGrammar(readAssetsFile2String(this, "call.bnf", "utf-8"), new ISpeechGrammarInitListener() {                @Override                public void speechGrammarInitCallback(String grammarID, int nErrorCode) throws RemoteException {                    LogUtils.w("errorCode= " + nErrorCode);                    SpeechServiceProxy.getInstance().impl().startSpeechAsr(getPackageName(), 1000, new ISpeechAsrListener() {                        @Override                        public void onBegin() throws RemoteException {                        }                        @Override                        public void onEnd() throws RemoteException {                        }                        @Override                        public void onResult(String text) throws RemoteException {                            LogUtils.d("result =" + text);                        }                        @Override                        public void onError(int code) throws RemoteException {                        }                        @Override                        public IBinder asBinder() {                            return null;                        }                    });                }                @Override                public IBinder asBinder() {                    return null;                }            });        } catch (RemoteException e) {            e.printStackTrace();        }    }    public void testTTS(View view) {        try {            SpeechServiceProxy.getInstance().impl().onPlayCallback(getPackageName(), StringUtil.getString(R.string.start_qrcode_tip), null);        } catch (RemoteException e) {            e.printStackTrace();        }    }}
/* * *  * *  *  * *  *  * Copyright (c) 2008-2017 UBT Corporation.  All rights reserved.  Redistribution, *  *  *  modification, and use in source and binary forms are not permitted unless otherwise authorized by UBT. *  *  * *  * * */package com.ubtechinc.alpha.task;import android.content.Context;import android.content.Intent;import com.ubtech.utilcode.utils.notification.NotificationCenter;import com.ubtech.utilcode.utils.notification.Subscriber;import com.ubtechinc.alpha.affairdispatch.constants.AffairPriority;import com.ubtechinc.alpha.behavior.RobotTakeARest;import com.ubtechinc.alpha.event.KeyPressEvent;import com.ubtechinc.alpha.jni.headkey.HeadKeyMgr;import com.ubtechinc.alpha.model.StaticValue;import com.ubtechinc.alpha.ops.ActionServiceProxy;import com.ubtechinc.alpha.ops.action.ActionPlayListener;import com.ubtechinc.alpha.robotinfo.RobotState;import com.ubtechinc.alpha.utils.AlphaUtils;import com.ubtechinc.alpha.utils.SoundVolumesUtils;import com.ubtechinc.alpha.utils.StringUtil;import com.ubtechinc.alpha.utils.SysUtils;import com.ubtechinc.alpha.wificonnect.Alpha2Connection;import com.ubtechinc.alpha2services.R;import java.util.concurrent.atomic.AtomicBoolean;/** * @desc : 按键处理 * @author: Logic * @email : logic.peng@ubtech.com * @time : 2017/4/26 * @modifier: * @modify_time: */public class ProxyKeyProcessorImpl extends AbstractProxyService {	private final Context mContext;	private HeadKeyMgr headKeyMgr;	private AtomicBoolean completed = new AtomicBoolean(true);	private volatile boolean muteLedEnable = false;//默认灯不亮	public ProxyKeyProcessorImpl(Context cxt) {		this.mContext = cxt;		if (SysUtils.is5Mic()){			headKeyMgr = new HeadKeyMgr();			headKeyMgr.Init();			headKeyMgr.nativeInit();		}	}	@Override	public void onCreate() {		super.onCreate();		if (SysUtils.is5Mic())			headKeyMgr.nativeThreadStart();	}	@Override	public void registerEvent() {		NotificationCenter.defaultCenter().subscriber(KeyPressEvent.class, mKeyPressSubscriber);	}	@Override	public void unregisterEvent() {		NotificationCenter.defaultCenter().unsubscribe(KeyPressEvent.class, mKeyPressSubscriber);	}	@Override	public void onDestroy() {		super.onDestroy();		if (SysUtils.is5Mic())			headKeyMgr.nativeThreadStop();	}	private Subscriber<KeyPressEvent> mKeyPressSubscriber = new Subscriber<KeyPressEvent>() {		@Override		public void onEvent(KeyPressEvent event) {			if (event.keyType == 5) {				SoundVolumesUtils.get(mContext).mulVolume(1);			} else if (event.keyType == 4) {				SoundVolumesUtils.get(mContext).addVolume(1);			} else if (event.keyType == 7) {				Alpha2Connection connection = Alpha2Connection.getInstance(mContext);				if (!connection.isConnectingNow() ) {					connection.beginNetworkConnection();				} else {					connection.stopNetworkConnection(true);				}			} else if (event.keyType == 6) {				if (completed.getAndSet(false)) {					if (RobotState.get().isInPowerSave()) {						RobotTakeARest.instance().start(false);					}					AlphaUtils.interruptAlphaNoIntent(mContext);					ActionServiceProxy.getInstance().playAction(StringUtil.getString(R.string.action_wakeup_0), AffairPriority.PRIORITY_HIGH, new ActionPlayListener() {						@Override						public void onActionResult(int nErr) {							//最后通知第三方应用							AlphaUtils.sendInterruptIntent(mContext);							mContext.sendBroadcast(new Intent(StaticValue.ALPHA_QR_CODE_CANCLE));							completed.set(true);						}					});				}			}else if (event.keyType == 1){//				muteLedEnable = !muteLedEnable;//				RobotOpsManager.get(mContext).executeOp(new SetMuteKeyLedOp(muteLedEnable));			}		}	};}